{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAceA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAC7B,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QADV,QAEI,4BAAQC,QAASL,GAAmBC,K,gBCgBjC,EArBA,WACX,IAAMK,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAChBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEf,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAdV,aAcwBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAnBJ,aAmBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SClBvCK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKjB,UAAU,SACViB,IA4FEC,EAvFH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,eAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,sBAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KAMnBC,qBAAU,WACNC,QAAQC,IAAI,UACZC,IAEKvB,MAAK,SAAAwB,GACFX,EAASW,QAElB,IACHH,QAAQC,IAAI,SAAUV,EAAMa,OAAQ,SAGpC,IAwCMC,EAAcV,EACdJ,EACAA,EAAMe,QAAO,SAAAxC,GAAI,OAAIA,EAAKG,aAEhC,OACI,6BACI,qCACA,kBAAC,EAAD,CAAckB,QAASU,IACvB,6BACI,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKU,EAAYE,KAAI,SAAAzC,GAAI,OACjB,kBAAC,EAAD,CACI0C,IAAK1C,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBA1DX,SAACU,GACxB,IAAMX,EAAOyB,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAEjC,KAAOA,KAChCkC,EAAW,eAAQ7C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDiC,EACYzB,EAAIkC,GACXhC,MAAK,SAAAiC,GACFpB,EAASD,EAAMgB,KAAI,SAAAzC,GAAI,OAAIA,EAAKW,KAAOA,EAAKmC,EAAe9C,SAE9D+C,OAAM,SAAAC,GACHhB,EAAgB,aAAD,OAAchC,EAAKK,QAAnB,0CACf4C,YAAW,WACPjB,EAAgB,QACjB,KACHN,EAASD,EAAMe,QAAO,SAAAI,GAAC,OAAIA,EAAEjC,KAAOA,SA4CJuC,CAAmBlD,EAAKW,WAG5D,0BAAMwC,SA1CE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfjD,QAASsB,EACTf,MAAM,IAAI2C,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAG/BtB,EACYkB,GACPzC,MAAK,SAAAiC,GACFpB,EAASD,EAAMT,OAAO8B,IACtBlB,EAAW,SA+BX,2BAAO+B,MAAOhC,EACViC,SA3BS,SAACR,GACtBxB,EAAWwB,EAAMS,OAAOF,UA2BhB,4BAAQG,KAAK,UAAb,W,MC5FhBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d0181eae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content} &nbsp;\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n// const baseUrl = 'http://localhost:3001/api/notes'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = (props) => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('a new note!')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState('an error happened!')\r\n\r\n    useEffect(() => {\r\n        console.log('effect')\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n    console.log('render', notes.length, 'notes')\r\n\r\n\r\n    const toggleImportanceOf = (id) => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id === id ? returnedNote : note))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(`the note '${note.content}' was already deleted from the server`)\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 3000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n\r\n    }\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important)\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? 'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map(note =>\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        toggleImportance={() => toggleImportanceOf(note.id)} />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote}\r\n                    onChange={handleNoteChange} />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}